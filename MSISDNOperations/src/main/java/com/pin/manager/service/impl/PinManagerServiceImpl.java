package com.pin.manager.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;

import com.pin.manager.dao.GeneratePinRequest;
import com.pin.manager.dao.GeneratePinResponse;
import com.pin.manager.dao.MsisdnValidationTrialData;
import com.pin.manager.dao.PinData;
import com.pin.manager.dao.ValidatePinRequest;
import com.pin.manager.dao.ValidatePinResponse;
import com.pin.manager.exception.InvalidMsisdnException;
import com.pin.manager.exception.MaxPinCountException;
import com.pin.manager.repository.MsisdnTrialRepository;
import com.pin.manager.repository.PinManagerRepository;
import com.pin.manager.service.PinManagerService;
import com.pin.manager.utility.PinManagerUtility;

@Service
public class PinManagerServiceImpl implements PinManagerService {

	@Autowired
	PinManagerUtility pinManagerUtility;
	@Autowired
	PinManagerRepository pinManagerRepository;
	@Autowired
	MsisdnTrialRepository msisdnTrialRepository;
	@Value("${MaxAllowedPinCount}")
	int maxAllowedPinCount;
	@Value("${TrialCount}")
	int allowedTrialCount;

	@Override
	public GeneratePinResponse generatePin(GeneratePinRequest genRequest) throws Exception {

		// if existing pin count for a msisdn greater than the allowed count
		
		if(null == genRequest.getMsisdn() || "".equals(genRequest.getMsisdn())) {
			
			throw new InvalidMsisdnException();
		}
		
		else if (checkPinCountForMsisdn(genRequest.getMsisdn()) >= maxAllowedPinCount) {
			throw new MaxPinCountException(maxAllowedPinCount);
		} else {

			// generate a new pin
			String pin = pinManagerUtility.generatePin();
			System.out.println(" Pin generated by utility is " + pin);

			// Save PinData into DB
			PinData pinInfo = new PinData();
			pinInfo.setMsisdn(genRequest.getMsisdn());
			pinInfo.setPin(pin);
			pinManagerRepository.save(pinInfo);

			// Save Data in Validation Trial Count table.
			MsisdnValidationTrialData trialData = new MsisdnValidationTrialData();
			trialData.setMsisdn(genRequest.getMsisdn());
			trialData.setTrialCount(0);
			msisdnTrialRepository.save(trialData);

			// weave the respnse.
			GeneratePinResponse response = new GeneratePinResponse();
			response.setPin(pin);
			response.setMsisdn(genRequest.getMsisdn());
			return response;
		}

	}

	@Override
	@Transactional
	public ValidatePinResponse validatePin(ValidatePinRequest validateReq) {
		// TODO Auto-generated method stub
		ValidatePinResponse response = new ValidatePinResponse();
		List<PinData> pinInfoList = pinManagerRepository.findBymsisdn(validateReq.getMsisdn());
		MsisdnValidationTrialData trialInfo = msisdnTrialRepository.findById(validateReq.getMsisdn()).get();

		if (pinInfoList.isEmpty()) {

			// No records found for the entered MSISDN
			response.setResponse("No record found for the entered Msisdn.");
		} else {

			System.out.println(pinInfoList.size() + " records found for the entered Msisdn");

			// Records found for the Msisdn. Now look if the entered pin is associated with
			// the Msisdn.
			PinData validRecord = pinInfoList.stream().filter(x -> x.getPin().equals(validateReq.getPin())).findAny().orElse(null);

			// If entered pin is associated with Msisdn.
			if (null != validRecord) {

				// if already validated then send below response.
				if (validRecord.isValidated()) {

					response.setResponse("Pin Already Validated");
				} else {

					// entered pin is associated with MSISDN and not validated. so validate the pin now.
					response.setResponse("Pin Validation Successful");

					// update the entry in database
					validRecord.setValidated(true);
					validRecord.setLastModifiedDate(new Date());
					pinManagerRepository.save(validRecord);

					// Reset the PinCounter for the specific Msisdn.
					if(null!= trialInfo) {
						
						trialInfo.setTrialCount(0);
						msisdnTrialRepository.save(trialInfo);
					}

				}

			}

			else {

				System.out.println("This means entered pin is wrong. so increment the trial counter.");

				if (null != trialInfo) {

					int currentTrialCount = trialInfo.getTrialCount();
					System.out.println("Current Trial Count received from DB" + currentTrialCount);
					currentTrialCount++;

					if (currentTrialCount == allowedTrialCount) {
						// No of trials equal to allowes tries, then delete all the pins of the MSISDN.
						pinManagerRepository.deleteBymsisdnAndValidated(pinInfoList.get(0).getMsisdn(),false);
						msisdnTrialRepository.deleteById(pinInfoList.get(0).getMsisdn());
						response.setResponse("Validation Failed.Maximum Threshold reached.Discarding all PINs.");
						
					} else {

						// save the updated count to trial table.
						trialInfo.setTrialCount(currentTrialCount);
						msisdnTrialRepository.save(trialInfo);
						response.setResponse("Entered Pin is wrong.Validation Failed.");
					}

					System.out.println("Updated trial count is " + currentTrialCount);
				}
			}
		}	
		return response;

	}

	// Return the Number of entries in the Database for a msisdn
	public int checkPinCountForMsisdn(String msisdn) {

		List<PinData> info = pinManagerRepository.findBymsisdnAndValidated(msisdn, false);
		return info.size();
	}

	// get method to get all the Data
	public List<PinData> getAllPinData() {

		List<PinData> pinDataList = new ArrayList<PinData>();

		pinManagerRepository.findAll().forEach(pinDataList::add);
		return pinDataList;
	}
	
	public List<MsisdnValidationTrialData> getAllTrialData() {

		List<MsisdnValidationTrialData> trialDataList = new ArrayList<MsisdnValidationTrialData>();

		msisdnTrialRepository.findAll().forEach(trialDataList::add);
		return trialDataList;
	}
	
	// get methods end.
}
